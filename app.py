import os
import tempfile
import math
import subprocess
import streamlit as st
import whisper

# ======= –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =======
MODEL_NAME = os.getenv("WHISPER_MODEL", "small")  # tiny, base, small, medium, large
MODEL_DIR = os.path.join(os.getcwd(), "models")    # –ø–∞–ø–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–µ–π
os.makedirs(MODEL_DIR, exist_ok=True)
CHUNK_LENGTH_SEC = 300  # –¥–ª–∏–Ω–∞ –∫—É—Å–∫–∞ –ø—Ä–∏ –Ω–∞—Ä–µ–∑–∫–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
# =========================

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ (–∫—ç—à–∏—Ä—É–µ–º)
@st.cache_resource
def load_whisper_model():
    return whisper.load_model(MODEL_NAME, download_root=MODEL_DIR)

model = load_whisper_model()

def convert_to_wav(input_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ª—é–±–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ WAV 16kHz mono —Å –ø–æ–º–æ—â—å—é ffmpeg."""
    tmp_wav = tempfile.NamedTemporaryFile(delete=False, suffix=".wav")
    tmp_wav.close()
    cmd = [
        "ffmpeg", "-y", "-i", input_path,
        "-ar", "16000", "-ac", "1", "-sample_fmt", "s16",
        tmp_wav.name
    ]
    subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
    return tmp_wav.name

def transcribe_with_whisper(file_path):
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –≤–µ—Å—å —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é Whisper."""
    result = model.transcribe(file_path, language="ru")
    return result["text"]

def get_audio_duration(path):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —á–µ—Ä–µ–∑ ffprobe."""
    cmd = [
        "ffprobe", "-v", "error", "-show_entries",
        "format=duration", "-of", "default=noprint_wrappers=1:nokey=1", path
    ]
    duration_str = subprocess.check_output(cmd).decode().strip()
    return math.ceil(float(duration_str))

def transcribe_large_file_in_chunks(path):
    """–†–µ–∂–µ—Ç —Ñ–∞–π–ª –Ω–∞ –∫—É—Å–∫–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –∫–∞–∂–¥—ã–π –∫—É—Å–æ–∫."""
    total_duration = get_audio_duration(path)
    whole_text = ""

    for start in range(0, total_duration, CHUNK_LENGTH_SEC):
        chunk_file = tempfile.NamedTemporaryFile(delete=False, suffix=".wav")
        chunk_file.close()
        cmd = [
            "ffmpeg", "-y", "-i", path, "-ss", str(start),
            "-t", str(CHUNK_LENGTH_SEC), chunk_file.name
        ]
        subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
        try:
            text = transcribe_with_whisper(chunk_file.name)
            whole_text += text.strip() + " "
        except Exception:
            continue
        finally:
            os.unlink(chunk_file.name)

    return whole_text.strip() or "(–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å)"

# ========== Streamlit UI ==========
st.title("üéô –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç (Whisper)")
st.write("–ó–∞–≥—Ä—É–∑–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, WAV, M4A, OGG, FLAC) –∏ –ø–æ–ª—É—á–∏ —Ç–µ–∫—Å—Ç. –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω.")

uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª", type=["mp3", "wav", "m4a", "ogg", "flac"])

if uploaded_file is not None:
    with st.spinner("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞..."):
        temp_in = tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(uploaded_file.name)[1])
        temp_in.write(uploaded_file.read())
        temp_in.close()

        wav_path = convert_to_wav(temp_in.name)

        file_size_mb = os.path.getsize(wav_path) / (1024 * 1024)
        if file_size_mb > 10:
            text_result = transcribe_large_file_in_chunks(wav_path)
        else:
            text_result = transcribe_with_whisper(wav_path)

        os.unlink(temp_in.name)
        os.unlink(wav_path)

    if text_result:
        st.success("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç", text_result, height=300)
        st.download_button("üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", text_result, file_name="transcription.txt")
